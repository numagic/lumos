import itertools
import numpy as np
import unittest

from numpy.testing import assert_allclose
from parameterized.parameterized import parameterized_class

from lumos.numpy import lmap
from lumos.models.tires.pacejka import MF52
from lumos.models.test_utils import BaseModelTest


# Basic smoke tests
class TestMF52Base(BaseModelTest, unittest.TestCase):
    ModelClass: type = MF52


class TestMF52OptBase(BaseModelTest, unittest.TestCase):
    ModelClass: type = MF52

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        # Overwrite the model used in base test.
        cls.model = cls.ModelClass(opt_mode=True)


# Tests to ensure model outputs.
# NOTE: we could make these also inherit from BaseModelTest, and combine the tests, but
# somehow the inherited tests don'tw ork well with parameterized_class, such that the
# class attribute is not availalble on the first setUpClass call.
@parameterized_class([{"opt_mode": False}, {"opt_mode": True}])
class TestMF52Outputs(unittest.TestCase):
    """Test MF5.2 against the outputs from the Matlab implementation MFeval.

    The tir file used is the default one.

    see:
    documentation: https://mfeval.wordpress.com.
    code: https://www.mathworks.com/matlabcentral/fileexchange/63618-mfeval

    """

    @classmethod
    def setUpClass(cls):
        cls.model = MF52(opt_mode=cls.opt_mode)

    def _call_on_comb_inputs(
        self, Fz=[4000.0], kappa=[0.0], alpha=[0.0], gamma=[0.0], vx=[16.0],
    ):
        """Helper function to call model on a combinatory amount of input combinations

        Default input values are specified as single-element lists.
        """

        val_dict = {
            "Fz": Fz,
            "kappa": kappa,
            "alpha": alpha,
            "gamma": gamma,
            "vx": vx,
        }

        # Build a list of the values with the same order as model inputs
        val_list = [val_dict[k] for k in self.model.get_group_names("inputs")]

        # Nxm matrix: N vectors with each vector size m
        inputs = np.array(list(itertools.product(*val_list)))
        outputs, *_ = lmap(self.model.forward_with_arrays)(inputs)
        return outputs

    def test_combined_load(self):
        """Test a combination of load condition against ground truth"""
        outputs = self._call_on_comb_inputs(
            kappa=np.linspace(-0.1, 0.1, 4),
            alpha=np.linspace(-0.1, 0.1, 4),
            Fz=[3000.0, 9000.0],
            gamma=[-0.05, 0.0, 0.05],
            vx=[10.0, 50.0],
        )

        idx = [
            self.model.get_var_index(group="outputs", name=n)
            for n in ["Fx", "Fy", "Mx", "My", "Mz"]
        ]
        model_forces_and_moments = outputs[:, idx]

        # ground truth of ["Fx", "Fy", "Mx", "My", "Mz"]
        expected_forces_and_moments = np.array(
            [
                [-2.089e03, 1.738e03, 3.814e01, -1.200e01, 4.564e01],
                [-2.062e03, 1.710e03, 1.825e00, -1.200e01, -5.952e00],
                [-2.089e03, 1.573e03, -3.485e01, -1.200e01, -5.709e01],
                [-2.089e03, 1.738e03, 3.814e01, -1.200e01, 4.564e01],
                [-2.062e03, 1.710e03, 1.825e00, -1.200e01, -5.952e00],
                [-2.089e03, 1.573e03, -3.485e01, -1.200e01, -5.709e01],
                [-2.363e03, 6.233e02, 3.453e01, -1.200e01, 5.057e01],
                [-2.332e03, 5.236e02, -2.017e00, -1.200e01, -7.876e00],
                [-2.363e03, 3.648e02, -3.876e01, -1.200e01, -6.629e01],
                [-2.363e03, 6.233e02, 3.453e01, -1.200e01, 5.057e01],
                [-2.332e03, 5.236e02, -2.017e00, -1.200e01, -7.876e00],
                [-2.363e03, 3.648e02, -3.876e01, -1.200e01, -6.629e01],
                [-2.297e03, -6.361e02, 3.046e01, -1.200e01, 4.908e01],
                [-2.267e03, -7.943e02, -6.283e00, -1.200e01, -7.483e00],
                [-2.297e03, -8.937e02, -4.283e01, -1.200e01, -6.463e01],
                [-2.297e03, -6.361e02, 3.046e01, -1.200e01, 4.908e01],
                [-2.267e03, -7.943e02, -6.283e00, -1.200e01, -7.483e00],
                [-2.297e03, -8.937e02, -4.283e01, -1.200e01, -6.463e01],
                [-2.003e03, -1.627e03, 2.725e01, -1.200e01, 3.992e01],
                [-1.977e03, -1.755e03, -9.394e00, -1.200e01, -9.140e00],
                [-2.003e03, -1.791e03, -4.574e01, -1.200e01, -5.893e01],
                [-2.003e03, -1.627e03, 2.725e01, -1.200e01, 3.992e01],
                [-1.977e03, -1.755e03, -9.394e00, -1.200e01, -9.140e00],
                [-2.003e03, -1.791e03, -4.574e01, -1.200e01, -5.893e01],
                [-9.392e02, 1.879e03, 3.860e01, -1.200e01, 1.220e01],
                [-9.365e02, 1.863e03, 2.320e00, -1.200e01, -1.368e01],
                [-9.392e02, 1.728e03, -3.434e01, -1.200e01, -4.051e01],
                [-9.392e02, 1.879e03, 3.860e01, -1.200e01, 1.220e01],
                [-9.365e02, 1.863e03, 2.320e00, -1.200e01, -1.368e01],
                [-9.392e02, 1.728e03, -3.434e01, -1.200e01, -4.051e01],
                [-1.117e03, 6.882e02, 3.474e01, -1.200e01, 2.142e01],
                [-1.113e03, 6.070e02, -1.746e00, -1.200e01, -9.083e00],
                [-1.117e03, 4.613e02, -3.845e01, -1.200e01, -3.971e01],
                [-1.117e03, 6.882e02, 3.474e01, -1.200e01, 2.142e01],
                [-1.113e03, 6.070e02, -1.746e00, -1.200e01, -9.083e00],
                [-1.117e03, 4.613e02, -3.845e01, -1.200e01, -3.971e01],
                [-1.067e03, -7.236e02, 3.017e01, -1.200e01, 3.272e01],
                [-1.064e03, -8.708e02, -6.531e00, -1.200e01, 3.330e00],
                [-1.067e03, -9.505e02, -4.302e01, -1.200e01, -2.592e01],
                [-1.067e03, -7.236e02, 3.017e01, -1.200e01, 3.272e01],
                [-1.064e03, -8.708e02, -6.531e00, -1.200e01, 3.330e00],
                [-1.067e03, -9.505e02, -4.302e01, -1.200e01, -2.592e01],
                [-8.948e02, -1.839e03, 2.656e01, -1.200e01, 2.885e01],
                [-8.923e02, -1.967e03, -1.008e01, -1.200e01, 3.667e00],
                [-8.948e02, -1.991e03, -4.638e01, -1.200e01, -2.067e01],
                [-8.948e02, -1.839e03, 2.656e01, -1.200e01, 2.885e01],
                [-8.923e02, -1.967e03, -1.008e01, -1.200e01, 3.667e00],
                [-8.948e02, -1.991e03, -4.638e01, -1.200e01, -2.067e01],
                [1.031e03, 1.870e03, 3.857e01, -1.200e01, -2.862e01],
                [1.029e03, 1.946e03, 2.590e00, -1.200e01, -8.422e00],
                [1.031e03, 1.908e03, -3.376e01, -1.200e01, 1.096e01],
                [1.031e03, 1.870e03, 3.857e01, -1.200e01, -2.862e01],
                [1.029e03, 1.946e03, 2.590e00, -1.200e01, -8.422e00],
                [1.031e03, 1.908e03, -3.376e01, -1.200e01, 1.096e01],
                [1.226e03, 6.668e02, 3.468e01, -1.200e01, -2.575e01],
                [1.224e03, 7.634e02, -1.240e00, -1.200e01, -1.453e00],
                [1.226e03, 8.008e02, -3.735e01, -1.200e01, 2.282e01],
                [1.226e03, 6.668e02, 3.468e01, -1.200e01, -2.575e01],
                [1.224e03, 7.634e02, -1.240e00, -1.200e01, -1.453e00],
                [1.226e03, 8.008e02, -3.735e01, -1.200e01, 2.282e01],
                [1.172e03, -7.475e02, 3.010e01, -1.200e01, -1.083e01],
                [1.170e03, -7.169e02, -6.033e00, -1.200e01, 1.224e01],
                [1.172e03, -6.133e02, -4.193e01, -1.200e01, 3.540e01],
                [1.172e03, -7.475e02, 3.010e01, -1.200e01, -1.083e01],
                [1.170e03, -7.169e02, -6.033e00, -1.200e01, 1.224e01],
                [1.172e03, -6.133e02, -4.193e01, -1.200e01, 3.540e01],
                [9.823e02, -1.854e03, 2.651e01, -1.200e01, -6.651e00],
                [9.807e02, -1.890e03, -9.829e00, -1.200e01, 1.216e01],
                [9.823e02, -1.817e03, -4.582e01, -1.200e01, 3.176e01],
                [9.823e02, -1.854e03, 2.651e01, -1.200e01, -6.651e00],
                [9.807e02, -1.890e03, -9.829e00, -1.200e01, 1.216e01],
                [9.823e02, -1.817e03, -4.582e01, -1.200e01, 3.176e01],
                [2.313e03, 1.730e03, 3.812e01, -1.200e01, -4.525e01],
                [2.279e03, 1.814e03, 2.160e00, -1.200e01, 5.988e00],
                [2.313e03, 1.791e03, -3.414e01, -1.200e01, 5.825e01],
                [2.313e03, 1.730e03, 3.812e01, -1.200e01, -4.525e01],
                [2.279e03, 1.814e03, 2.160e00, -1.200e01, 5.988e00],
                [2.313e03, 1.791e03, -3.414e01, -1.200e01, 5.825e01],
                [2.617e03, 5.990e02, 3.446e01, -1.200e01, -4.954e01],
                [2.578e03, 7.127e02, -1.404e00, -1.200e01, 8.331e00],
                [2.617e03, 7.737e02, -3.743e01, -1.200e01, 6.683e01],
                [2.617e03, 5.990e02, 3.446e01, -1.200e01, -4.954e01],
                [2.578e03, 7.127e02, -1.404e00, -1.200e01, 8.331e00],
                [2.617e03, 7.737e02, -3.743e01, -1.200e01, 6.683e01],
                [2.544e03, -6.664e02, 3.036e01, -1.200e01, -4.529e01],
                [2.506e03, -6.115e02, -5.691e00, -1.200e01, 1.132e01],
                [2.544e03, -4.909e02, -4.153e01, -1.200e01, 6.773e01],
                [2.544e03, -6.664e02, 3.036e01, -1.200e01, -4.529e01],
                [2.506e03, -6.115e02, -5.691e00, -1.200e01, 1.132e01],
                [2.544e03, -4.909e02, -4.153e01, -1.200e01, 6.773e01],
                [2.218e03, -1.649e03, 2.718e01, -1.200e01, -4.038e01],
                [2.186e03, -1.667e03, -9.107e00, -1.200e01, 9.270e00],
                [2.218e03, -1.587e03, -4.508e01, -1.200e01, 5.852e01],
                [2.218e03, -1.649e03, 2.718e01, -1.200e01, -4.038e01],
                [2.186e03, -1.667e03, -9.107e00, -1.200e01, 9.270e00],
                [2.218e03, -1.587e03, -4.508e01, -1.200e01, 5.852e01],
                [-6.090e03, 5.084e03, 1.469e02, -3.600e01, 8.872e01],
                [-5.985e03, 4.885e03, 3.631e01, -3.600e01, -8.938e00],
                [-6.090e03, 4.417e03, -7.692e01, -3.600e01, -1.013e02],
                [-6.090e03, 5.084e03, 1.469e02, -3.600e01, 8.872e01],
                [-5.985e03, 4.885e03, 3.631e01, -3.600e01, -8.938e00],
                [-6.090e03, 4.417e03, -7.692e01, -3.600e01, -1.013e02],
                [-7.482e03, 1.973e03, 1.167e02, -3.600e01, 9.476e01],
                [-7.353e03, 1.603e03, 4.430e00, -3.600e01, -2.501e01],
                [-7.482e03, 1.072e03, -1.094e02, -3.600e01, -1.434e02],
                [-7.482e03, 1.973e03, 1.167e02, -3.600e01, 9.476e01],
                [-7.353e03, 1.603e03, 4.430e00, -3.600e01, -2.501e01],
                [-7.482e03, 1.072e03, -1.094e02, -3.600e01, -1.434e02],
                [-7.229e03, -1.715e03, 8.089e01, -3.600e01, 7.922e01],
                [-7.105e03, -2.251e03, -3.300e01, -3.600e01, -3.449e01],
                [-7.229e03, -2.608e03, -1.452e02, -3.600e01, -1.514e02],
                [-7.229e03, -1.715e03, 8.089e01, -3.600e01, 7.922e01],
                [-7.105e03, -2.251e03, -3.300e01, -3.600e01, -3.449e01],
                [-7.229e03, -2.608e03, -1.452e02, -3.600e01, -1.514e02],
                [-5.464e03, -4.460e03, 5.424e01, -3.600e01, 4.016e01],
                [-5.369e03, -4.896e03, -5.869e01, -3.600e01, -4.390e01],
                [-5.464e03, -5.112e03, -1.695e02, -3.600e01, -1.336e02],
                [-5.464e03, -4.460e03, 5.424e01, -3.600e01, 4.016e01],
                [-5.369e03, -4.896e03, -5.869e01, -3.600e01, -4.390e01],
                [-5.464e03, -5.112e03, -1.695e02, -3.600e01, -1.336e02],
                [-2.887e03, 5.498e03, 1.509e02, -3.600e01, -4.231e01],
                [-2.873e03, 5.319e03, 4.052e01, -3.600e01, -9.596e01],
                [-2.887e03, 4.847e03, -7.274e01, -3.600e01, -1.556e02],
                [-2.887e03, 5.498e03, 1.509e02, -3.600e01, -4.231e01],
                [-2.873e03, 5.319e03, 4.052e01, -3.600e01, -9.596e01],
                [-2.887e03, 4.847e03, -7.274e01, -3.600e01, -1.556e02],
                [-4.110e03, 2.165e03, 1.186e02, -3.600e01, 1.417e01],
                [-4.090e03, 1.829e03, 6.625e00, -3.600e01, -5.880e01],
                [-4.110e03, 1.316e03, -1.070e02, -3.600e01, -1.323e02],
                [-4.110e03, 2.165e03, 1.186e02, -3.600e01, 1.417e01],
                [-4.090e03, 1.829e03, 6.625e00, -3.600e01, -5.880e01],
                [-4.110e03, 1.316e03, -1.070e02, -3.600e01, -1.323e02],
                [-3.866e03, -1.986e03, 7.826e01, -3.600e01, 9.498e01],
                [-3.847e03, -2.512e03, -3.553e01, -3.600e01, 2.571e01],
                [-3.866e03, -2.833e03, -1.473e02, -3.600e01, -4.255e01],
                [-3.866e03, -1.986e03, 7.826e01, -3.600e01, 9.498e01],
                [-3.847e03, -2.512e03, -3.553e01, -3.600e01, 2.571e01],
                [-3.866e03, -2.833e03, -1.473e02, -3.600e01, -4.255e01],
                [-2.452e03, -5.078e03, 4.823e01, -3.600e01, 9.390e01],
                [-2.440e03, -5.530e03, -6.484e01, -3.600e01, 4.339e01],
                [-2.452e03, -5.730e03, -1.755e02, -3.600e01, -9.310e-01],
                [-2.452e03, -5.078e03, 4.823e01, -3.600e01, 9.390e01],
                [-2.440e03, -5.530e03, -6.484e01, -3.600e01, 4.339e01],
                [-2.452e03, -5.730e03, -1.755e02, -3.600e01, -9.309e-01],
                [3.183e03, 5.400e03, 1.500e02, -3.600e01, -1.241e02],
                [3.170e03, 5.459e03, 4.188e01, -3.600e01, -9.000e01],
                [3.183e03, 5.230e03, -6.902e01, -3.600e01, -6.099e01],
                [3.183e03, 5.400e03, 1.500e02, -3.600e01, -1.241e02],
                [3.170e03, 5.459e03, 4.188e01, -3.600e01, -9.000e01],
                [3.183e03, 5.230e03, -6.902e01, -3.600e01, -6.099e01],
                [4.531e03, 1.968e03, 1.167e02, -3.600e01, -8.806e01],
                [4.513e03, 2.088e03, 9.146e00, -3.600e01, -3.603e01],
                [4.531e03, 2.041e03, -1.000e02, -3.600e01, 1.640e01],
                [4.531e03, 1.968e03, 1.167e02, -3.600e01, -8.806e01],
                [4.513e03, 2.088e03, 9.146e00, -3.600e01, -3.603e01],
                [4.531e03, 2.041e03, -1.000e02, -3.600e01, 1.640e01],
                [4.262e03, -2.189e03, 7.629e01, -3.600e01, 1.524e01],
                [4.245e03, -2.260e03, -3.308e01, -3.600e01, 6.421e01],
                [4.262e03, -2.116e03, -1.404e02, -3.600e01, 1.137e02],
                [4.262e03, -2.189e03, 7.629e01, -3.600e01, 1.524e01],
                [4.245e03, -2.260e03, -3.308e01, -3.600e01, 6.421e01],
                [4.262e03, -2.116e03, -1.404e02, -3.600e01, 1.137e02],
                [2.703e03, -5.191e03, 4.713e01, -3.600e01, 5.095e01],
                [2.692e03, -5.405e03, -6.363e01, -3.600e01, 7.549e01],
                [2.703e03, -5.363e03, -1.719e02, -3.600e01, 1.059e02],
                [2.703e03, -5.191e03, 4.713e01, -3.600e01, 5.095e01],
                [2.692e03, -5.405e03, -6.363e01, -3.600e01, 7.549e01],
                [2.703e03, -5.363e03, -1.719e02, -3.600e01, 1.059e02],
                [6.491e03, 4.976e03, 1.459e02, -3.600e01, -7.797e01],
                [6.378e03, 5.063e03, 3.804e01, -3.600e01, 5.949e00],
                [6.491e03, 4.886e03, -7.237e01, -3.600e01, 9.734e01],
                [6.491e03, 4.976e03, 1.459e02, -3.600e01, -7.797e01],
                [6.378e03, 5.063e03, 3.804e01, -3.600e01, 5.949e00],
                [6.491e03, 4.886e03, -7.237e01, -3.600e01, 9.734e01],
                [7.974e03, 1.742e03, 1.145e02, -3.600e01, -8.641e01],
                [7.835e03, 1.918e03, 7.498e00, -3.600e01, 1.676e01],
                [7.974e03, 1.946e03, -1.009e02, -3.600e01, 1.240e02],
                [7.974e03, 1.742e03, 1.145e02, -3.600e01, -8.641e01],
                [7.835e03, 1.918e03, 7.498e00, -3.600e01, 1.676e01],
                [7.974e03, 1.946e03, -1.009e02, -3.600e01, 1.240e02],
                [7.705e03, -1.964e03, 7.847e01, -3.600e01, -6.924e01],
                [7.571e03, -1.954e03, -3.012e01, -3.600e01, 3.319e01],
                [7.705e03, -1.753e03, -1.368e02, -3.600e01, 1.334e02],
                [7.705e03, -1.964e03, 7.847e01, -3.600e01, -6.924e01],
                [7.571e03, -1.954e03, -3.012e01, -3.600e01, 3.319e01],
                [7.705e03, -1.753e03, -1.368e02, -3.600e01, 1.334e02],
                [5.823e03, -4.609e03, 5.279e01, -3.600e01, -5.747e01],
                [5.722e03, -4.761e03, -5.737e01, -3.600e01, 2.177e01],
                [5.823e03, -4.685e03, -1.653e02, -3.600e01, 9.647e01],
                [5.823e03, -4.609e03, 5.279e01, -3.600e01, -5.747e01],
                [5.722e03, -4.761e03, -5.737e01, -3.600e01, 2.177e01],
                [5.823e03, -4.685e03, -1.653e02, -3.600e01, 9.647e01],
            ]
        )

        if self.opt_mode:
            # Compare to only Fx and Fy for now.
            idx_forces = [
                self.model.get_var_index(group="outputs", name=n) for n in ["Fx", "Fy"]
            ]
            assert_allclose(
                model_forces_and_moments[:, idx_forces],
                expected_forces_and_moments[:, idx_forces],
                rtol=1e-3,
                atol=1e-1,
            )
        else:
            assert_allclose(
                model_forces_and_moments,
                expected_forces_and_moments,
                rtol=1e-3,
                atol=1e-1,
            )

    def test_pure_longituddinal(self):
        """Test pure lon sweep with varying camber and Fz against ground truth."""
        outputs = self._call_on_comb_inputs(
            kappa=np.linspace(-0.4, 0.4, 11),
            Fz=[3000.0, 9000.0],
            gamma=[-0.05, 0.0, 0.05],
        )

        model_fx = outputs[:, self.model.get_var_index(group="outputs", name="Fx")]

        expected_fx = [
            -2796.56963084,
            -2733.30200917,
            -2796.56963084,
            -2822.29079848,
            -2760.01053393,
            -2822.29079848,
            -2822.34431826,
            -2763.43103899,
            -2822.34431826,
            -2718.23586704,
            -2669.11283307,
            -2718.23586704,
            -2155.00049345,
            -2132.1670137,
            -2155.00049345,
            36.50743292,
            36.50740294,
            36.50743292,
            2410.5548113,
            2384.77371065,
            2410.5548113,
            2834.21209243,
            2773.69268928,
            2834.21209243,
            2774.95003861,
            2710.19197123,
            2774.95003861,
            2699.97552039,
            2636.60410616,
            2699.97552039,
            2644.51986178,
            2582.92724464,
            2644.51986178,
            -7641.78679759,
            -7461.3707456,
            -7641.78679759,
            -7777.68884019,
            -7594.78197605,
            -7777.68884019,
            -7928.83333508,
            -7746.02377519,
            -7928.83333508,
            -7989.64005739,
            -7819.02789903,
            -7989.64005739,
            -7096.2839676,
            -6992.43650834,
            -7096.2839676,
            182.11307736,
            182.11307564,
            182.11307736,
            7633.17739703,
            7522.96143132,
            7633.17739703,
            8319.37137739,
            8140.78867221,
            8319.37137739,
            8139.04792121,
            7954.48776298,
            8139.04792121,
            7949.04404802,
            7767.89466234,
            7949.04404802,
            7804.98487502,
            7627.97696364,
            7804.98487502,
        ]

        assert_allclose(model_fx, expected_fx, rtol=1e-3, atol=1e-1)

    def test_pure_lateral(self):
        """Test pure lateral sweep with varying camber and Fz against ground truth."""
        outputs = self._call_on_comb_inputs(
            alpha=np.linspace(-0.4, 0.4, 11),
            Fz=[3000.0, 9000.0],
            gamma=[-0.05, 0.0, 0.05],
        )
        model_fy = outputs[:, self.model.get_var_index(group="outputs", name="Fy")]

        expected_fy = [
            2946.97100995,
            2875.65027059,
            2963.4321311,
            3020.08561319,
            2949.47392266,
            2988.67658577,
            2953.29331684,
            2904.37006758,
            2887.21148478,
            2563.96580055,
            2563.20754523,
            2492.85693118,
            1578.91875117,
            1610.75614562,
            1526.50831628,
            -34.51224303,
            -60.93038092,
            -81.47733168,
            -1591.52270428,
            -1673.98553484,
            -1644.76997092,
            -2458.11486815,
            -2523.90535118,
            -2533.2116071,
            -2811.64006475,
            -2841.62385533,
            -2893.78857849,
            -2939.84921098,
            -2937.70536476,
            -3006.37342598,
            -2980.79936337,
            -2950.3625753,
            -3016.12644207,
            7405.69979772,
            7070.20264191,
            7236.40946935,
            7776.42089938,
            7439.01811401,
            7496.89489366,
            7870.22609264,
            7578.66699526,
            7486.35745973,
            7158.67498893,
            6993.42721513,
            6726.35682838,
            4651.18523553,
            4601.75181446,
            4246.55302563,
            -35.34265818,
            -246.08657673,
            -428.85878952,
            -4472.93364941,
            -4821.5386868,
            -4880.97476051,
            -6613.70733211,
            -6869.53441203,
            -7055.44209543,
            -7307.305636,
            -7434.49889404,
            -7720.46853806,
            -7444.44155007,
            -7462.41649642,
            -7773.55317444,
            -7382.62676454,
            -7308.46305838,
            -7603.56085568,
        ]

        assert_allclose(model_fy, expected_fy, rtol=1e-3, atol=1e-1)

    def test_parameters(self):
        """Test changing parameters should yield the expected effect."""

        def _get_min_fy():
            outputs = self._call_on_comb_inputs(alpha=np.linspace(0, 0.4, 41)).squeeze()
            # NOTE: Fy is negative for positive alpha, so we take the min
            return outputs[:, self.model.get_var_index("outputs", "Fy")].min()

        def _get_max_fx():
            outputs = self._call_on_comb_inputs(kappa=np.linspace(0, 0.4, 41)).squeeze()
            return outputs[:, self.model.get_var_index("outputs", "Fx")].max()

        SCALE = 2  # change to mu
        TOL_SCALE = 1.5  # acceptable lower bound on change to output

        # Lateral max grip scaling
        Fy_base = _get_min_fy()
        self.model._params["LMUY"] *= SCALE
        Fy = _get_min_fy()
        self.model._params["LMUY"] /= SCALE
        self.assertGreater(
            Fy / Fy_base,
            TOL_SCALE,
            msg=f"Lateral grip scaling don't seem to change the peak enough",
        )

        # Longitudinal scaling
        Fx_base = _get_max_fx()
        self.model._params["LMUX"] *= SCALE
        Fx = _get_max_fx()
        self.model._params["LMUX"] /= SCALE
        self.assertGreater(
            Fx / Fx_base,
            TOL_SCALE,
            msg=f"Longitudial grip scaling don't seem to change the peak enough",
        )


if __name__ == "__main__":
    unittest.main()
